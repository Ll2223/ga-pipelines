name: Second Implementation

on:
  workflow_call:
    inputs:
      hml:
        required: true
        type: string
        description: 'Choose HML Environments'
      hml_1-5:
        required: true
        type: string
        description: 'Choose HML Environments'

jobs:

  deploy-dev:
    name: Deploy to dev
    runs-on: ubuntu-latest
    environment:
      name: dev
    
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v4

    - uses: actions/checkout@v4
      name: Checkout scripts
      with:
         repository: Ll2223/ga-pipelines
         token: ${{ secrets.GH_TOKEN }}
         path: templates
         sparse-checkout: scripts/PipelineRundeck
    
    - name: Get changed YAML files
      id: yaml-files
      run: |
        pip install requests
        export GH_TOKEN=${{ secrets.GH_TOKEN }}
        files=$(python templates/scripts/PipelineRundeck/identify-yaml.py)
        echo "::set-output name=files::${files}"

    - name: Staging Environment Variables
      id: staging-env-vars
      uses: raven-actions/environment-variables@v1.0.0
      with:
        github-token: ${{ secrets.TESTE_TOKEN }}
        environment: dev

    - name: Replace with envsubst
      run: |
        IFS=',' read -ra yaml_files <<< "${{ steps.yaml-files.outputs.files }}"
        for file in "${yaml_files[@]}"; do
          envsubst < $file | tee $file
        done
  
  dispatch_pipelines:
    name: Select HML Environment's
    needs: deploy-dev
    runs-on: ubuntu-latest
    outputs:
      steps: ${{fromJson(needs.choose.outputs.workflow_run.outputs)}}

    steps:
      - name: Convert Inputs to Boolean
        id: convert
        run: |
          echo "HML=${{ inputs.hml }}" >> $GITHUB_ENV
          echo "HML_1-5=${{ inputs.hml_1-5 }}" >> $GITHUB_ENV

      - name: Set Outputs
        id: choose
        run: |
          echo "workflow_run=1" >> $GITHUB_ENV

  deploy-hml:
    name: Deploy to hml
    needs: [deploy-dev, dispatch_pipelines]
    if: runner.fileExists('hml.txt')
    runs-on: ubuntu-latest
    environment:
      name: hml
    
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set HML Variable
      run: echo "HML=true" > hml.txt

    - uses: actions/checkout@v4
      name: Checkout scripts
      with:
         repository: Ll2223/ga-pipelines
         token: ${{ secrets.GH_TOKEN }}
         path: templates
         sparse-checkout: scripts/PipelineRundeck
    
    - name: Get changed YAML files
      id: yaml-files
      run: |
        pip install requests
        export GH_TOKEN=${{ secrets.GH_TOKEN }}
        files=$(python templates/scripts/PipelineRundeck/identify-yaml.py)
        echo "::set-output name=files::${files}"

    - name: Staging Environment Variables
      id: staging-env-vars
      uses: raven-actions/environment-variables@v1.0.0
      with:
        github-token: ${{ secrets.TESTE_TOKEN }}
        environment: hml

    - name: Replace with envsubst
      run: |
        IFS=',' read -ra yaml_files <<< "${{ steps.yaml-files.outputs.files }}"
        for file in "${yaml_files[@]}"; do
          envsubst < $file | tee $file
        done
  
  deploy-hml_1-5:
    name: Deploy to hml 1-5
    needs: [deploy-dev, dispatch_pipelines]
    if: runner.fileExists('hml_1-5.txt')
    runs-on: ubuntu-latest
    environment:
      name: hml_1-5
    
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set HML_1_5 Variable
      run: echo "HML_1-5=true" > hml_1-5.txt

    - uses: actions/checkout@v4
      name: Checkout scripts
      with:
         repository: Ll2223/ga-pipelines
         token: ${{ secrets.GH_TOKEN }}
         path: templates
         sparse-checkout: scripts/PipelineRundeck
    
    - name: Get changed YAML files
      id: yaml-files
      run: |
        pip install requests
        export GH_TOKEN=${{ secrets.GH_TOKEN }}
        files=$(python templates/scripts/PipelineRundeck/identify-yaml.py)
        echo "::set-output name=files::${files}"

    - name: Staging Environment Variables
      id: staging-env-vars
      uses: raven-actions/environment-variables@v1.0.0
      with:
        github-token: ${{ secrets.TESTE_TOKEN }}
        environment: hml_1-5

    - name: Replace with envsubst
      run: |
        IFS=',' read -ra yaml_files <<< "${{ steps.yaml-files.outputs.files }}"
        for file in "${yaml_files[@]}"; do
          envsubst < $file | tee $file
        done

  deploy-prd:
    name: Deploy to prd
    needs: [deploy-dev, dispatch_pipelines, deploy-hml, deploy-hml_1-5]
    if: ${{ needs.hml_toddy_pipeline.outputs.hml == '1' || needs.hml_nescau_pipeline.outputs.hml_1-5 == '1' }}
    runs-on: ubuntu-latest
    environment:
      name: prd
    
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v4

    - uses: actions/checkout@v4
      name: Checkout scripts
      with:
         repository: Ll2223/ga-pipelines
         token: ${{ secrets.GH_TOKEN }}
         path: templates
         sparse-checkout: scripts/PipelineRundeck
    
    - name: Get changed YAML files
      id: yaml-files
      run: |
        pip install requests
        export GH_TOKEN=${{ secrets.GH_TOKEN }}
        files=$(python templates/scripts/PipelineRundeck/identify-yaml.py)
        echo "::set-output name=files::${files}"

    - name: Staging Environment Variables
      id: staging-env-vars
      uses: raven-actions/environment-variables@v1.0.0
      with:
        github-token: ${{ secrets.TESTE_TOKEN }}
        environment: prd

    - name: Replace with envsubst
      run: |
        IFS=',' read -ra yaml_files <<< "${{ steps.yaml-files.outputs.files }}"
        for file in "${yaml_files[@]}"; do
          envsubst < $file | tee $file
        done
